# Establece breakpoints en las líneas deseadas
break SPI::spi.cpp:189
break SPI::spi.cpp:192

break SPI::Spi_t::writeEnable
#break read_sst25vf.cpp:
break read_sst25vf.cpp:32

# Establece un breakpoint en la función read_status
break SPI::Spi_t::read
break SPI::Spi_t::write
break SPI::Spi_t::erase_sst25_all



# Imprime el contenido de tx_buffer y rx_buffer
# Asegúrate de tener una instancia de la clase SPI en contexto para estos comandos

# Si tienes una instancia específica de SPI (e.g., spi_instance), usa:
# Imprimir variables privadas de la clase SPI
print spi_instance.rx_buffer[0]
print spi_instance.rx_buffer[1]
print spi_instance.tx_buffer[0]
print spi_instance.tx_buffer[1]
print spi_instance.spi_speed

# Imprimir el contenido completo de tx_buffer y rx_buffer en formato hexadecimal
# Asegúrate de estar en el contexto adecuado para esto, y que tx_buffer y rx_buffer sean accesibles
x/256xb spi_instance.tx_buffer
x/256xb spi_instance.rx_buffer

# Alternativamente, si accedes directamente sin instancia, asegúrate de estar en el contexto adecuado
# para esto y que el código esté correctamente cargado y detenido en un contexto de instancia válida.
# Por lo general, deberías estar en un contexto donde 'spi_instance' o una instancia similar es válida.

# Continuar la ejecución hasta el siguiente breakpoint
next

# Continuar la ejecución hasta el próximo breakpoint
continue

# Finaliza la ejecución de la lista de comandos
end

# Ejecuta el programa
run


# Verifica el contexto actual
info stack


# Muestra los frames disponibles
info frame

# Selecciona el frame que deseas inspeccionar
#frame <numero del frame>

# Verificar variables locales en el frame actual
info locals

# Verificar variables globales y estáticas
info variables


# Muestra la pila de llamadas
backtrace
